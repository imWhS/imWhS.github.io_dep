{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/11/16/hello-world/"},{"title":"Swift 흐름 제어 구문","text":"변수 및 상수 등의 선언문, 연산자를 이용한 처리문, 함수 및 구조체 정의문 등의 단순 구문과 달리, 흐름 제어 구문은 반복문, 조건문, 제어 전달문 등과 같이 코드를 읽는 흐름의 방향을 변경하는 역할을 한다. for123for 루프 상수 in 순회 대상 { 반복 실행할 구문} 루프 상수: for을 이용해 구문이 반복될 때마다 순회 대상이 가지는 아이템들을 하나 씩 새로 넘겨 받아 구문 내에서 순회 대상 개별 아이템을 대표하는 상수를 선언하는 영역이다. 매 번 자동으로 상수로 재선언되기 때문에 let 키워드를 코드에 포함시킬 필요는 없다. 순회 대상: 구문이 반복될 때마다 루프 상수에 전달될 아이템들을 가지는 데이터로, 해당 데이터의 타입이 포함하고 있는 아이템 개수만큼 구문이 반복된다. 순회 대상으로 쓸 수 있는 타입: 배열, 딕셔너리, 집합, 범위 연산자 데이터, 문자열 등 1234var str = &quot;Hello world&quot;for char in str.characters { print(&quot;str이 포함하는 개별 char: \\(char)&quot;)} String 문자열 타입의 데이터를 순회 대상으로 사용할 경우 String의 characters 속성을 사용해 char 루프 상수로 Character 타입으로 넘겨주어야 한다. String 자체는 순회 처리를 지원하지 않기 때문이다. 루프 상수가 굳이 필요하지 않다면 생략의 의미로 _로 대체할 수도 있다. while123while 조건문 { 반복 실행할 구문} repeat~while1234repeat { 반복 실행할 구문(단, 반드시 최소 한 번은 실행할 구문)}while 조건문 if~else/else if1234567if 조건문 A { 조건문 A가 참일 때 실행할 구문} else if 조건문B { //필요한 경우 조건문 B가 참일 때 실행할 구문} else { //필요한 경우 앞 if 조건문들이 모두 거짓일 때 실행할 구문} guard~else1234guard 조건문 else { 조건문이 거짓일 때 실행할 구문 return 혹은 break 조기 종료 구문} 다음 코드들이 실행되기 전, 특정한 조건을 만족하지 않아 오류를 발생하는 경우를 방지하기 위해 사용하기 때문에 조건식이 false일 때에만 내부 구문이 실행된다. 그래서 반드시 블록 내부에 (특정한 조건을 만족하지 않아 다음 코드를 실행하지 못하게 조기 종료 시키는) return이나 break 구문이 포함되어야 한다. 함수/메서드에서 주로 사용된다. switch12345678switch 비교 대상 { case 비교 패턴 A: 비교 대상의 값이 비교 패턴 A와 같은 경우 실행할 구문 case 비교 패턴 B: 비교 대상의 값이 비교 패턴 B와 같은 경우 실행할 구문 default: 비교 대상의 값이 비교 패턴 A, 패턴 B 모두 해당하지 않을 경우 실행할 구문} 기존 C언어, Java와 달리, 비교 패턴 A나 패턴 B와 일치해 해당 구문을 실행한 경우 이 외/아래 라인에 위치한 case 구문은 실행하지 않는다. 패턴 A, 패턴 B 모두 일치하더라도 더 상위 라인에 위치한 패턴 A에 대한 case 구문만 실행한 후 패턴 B에 대한 case 구문은 실행하지 않는다. 즉, 기존 대부분 언어의 switch 문과 달리 각 case 블록에 break 구문을 굳이 포함시킬 필요가 없다. Swift의 경우 반드시 switch 내 하나의 블록이라도 실행되어야 한다. 물론 단 하나의 비교 패턴과도 일치하지 않을 수도 있기 때문에, 이 경우를 대비해 default 구문을 추가한다. fallthroughSwift는 각 case 블록을 비워두어선 안 되며, 특히 암시적 fallthrough를 지원하지 않는다. 그래서 처음 일치한 case 구문이 아닌, 다음 라인(이후)의 case 구문을 실행하고자 한다면 fallthrough 구문을 명시해야 한다. 암시적 fallthrough: 다른 언어의 경우 break 구문이 없다면 처음 비교 패턴이 일치한 case 구문부터 마지막 default까지 모두 실행된다. 튜플을 이용한 활용123456789101112var tup = (2, 3)switch tup { case let (x, 3): print(&quot;tup의 두 번째 값 3과 일치합니다. 이 때 첫 번째 값은 \\(x)입니다.&quot;); //실제 콘솔 출력: tup의 두 번째 값 3과 일치합니다. 이 때 첫 번째 값은 2입니다. case let (2, y): print(&quot;tup의 첫 번째 값 2와 일치합니다. 이 때 두 번째 값은 \\(y)입니다.&quot;); //실제 콘솔 출력: tup의 첫 번째 값 2와 일치합니다. 이 때 두 번째 값은 3입니다. case let (x, y): print(&quot;tup의 첫 번째 값은 \\(x), 두 번째 값은 \\(y)입니다.&quot;); //실제 콘솔 출력: tup의 첫 번째 값은 2, 두 번째 값은 3입니다.} 비교 대상으로 튜플을 사용할 경우, 비교 패턴의 튜플과 ‘일부 패턴’만 일치하더라도 같다고 판단해 해당 case 구문을 실행한다. where을 이용한 활용123456789var couple = (3, -3)switch couple { case let (x, y) where x == y: print(&quot;\\(x), \\(y)의 값이 같습니다.&quot;) case let (x, y) where x == -y: print(&quot;\\(x), \\(y) 서로 절대값만 같습니다.&quot;) case let (x, y): print(&quot;\\(x), \\(y) 서로 값이 다릅니다.&quot;);} switch 문에서 임시로 사용되는 x, y 값에 대한 조건을 where 구문으로 추가할 수 있다. Reference 꼼꼼한 재은 씨의 스위프트(Swift): 문법편","link":"/2020/11/17/Swift-%ED%9D%90%EB%A6%84-%EC%A0%9C%EC%96%B4-%EA%B5%AC%EB%AC%B8/"},{"title":"운영체제 개요 : What Operating Systems Do","text":"운영체제란운영체제는 소프트웨어입니다. 운영체제는 컴퓨터 시스템을 구성하는 하드웨어(CPU, 저장 장치 등)의 바로 윗 계층에 위치해있고, 특히 이 하드웨어를 직접적으로, 가장 가까운 위치에서 동작시킬 수 있기 때문에 시스템 소프트웨어로 분류합니다. 아쉽게도 하드웨어 자체만으로는 사용자의 입장에서 도움 되는 기능(리그 오브 레전드 실행, 넷플릭스 영상 재생 등)을 단 하나도 제공받을 수 없습니다. KFC에 생닭, 밀가루랑 튀김기가 있어도 알바가 없으면 핫크리스피 치킨을 못 만들듯이 여러 하드웨어들 간 서로 유기적으로 동작시키는 주체가 없으면 이들은 그저 공간만 차지하는 고철 덩어리에 불과합니다. 사실상 일반적으로 우리가 컴퓨터에서 돌린다고 말하는 소프트웨어들은 컴퓨터 시스템을 구성하는 하드웨어 뿐 아니라, 운영체제를 포함한 계층 위에서 실행된다고 보는 게 맞습니다. 최근, 사용자 편의를 위해 운영체제가 부가적으로 제공하는 기능들이 점점 많아지고 있습니다. 운영체제도 결국 소프트웨어이기 때문에 메모리에 적재되어야 하는데, 이 부가적인 요소까지 적재하기에는 메모리 공간이 그렇게 여유롭지 못합니다. 그래서 운영체제를 구성하는 요소 중에서도 정말 핵심적인(아래에서 설명할) 것들은 **커널(모듈)**로 따로 묶여지고, 컴퓨터가 가동되는 중에는 이들만 항상 메모리에 상주하게 됩니다. 운영체제의 역할운영체제는 시스템 소프트웨어로서, 하드웨어와 응용 소프트웨어(애플리케이션, 사용자 프로그램) 사이에서 매개 역할을 합니다. 애플리케이션을 구성하는 코드를 읽을 수 있는 CPU 자원은 컴퓨터 시스템에서 단 1개 뿐입니다(싱글 프로세서 시스템 기준). 컴퓨터 시스템 입장에서는 운영체제가 자신을 제어하면서 하드웨어 자원을 필요로 하는 수 많은 애플리케이션들이 서로 싸우지 않고 협력적으로 작동할 수 있도록 자원을 공평하게 분배해줍니다. PC 혹은 스마트폰 등을 직접적으로 사용하는 입장에서는, 그저 터치스크린이나 키보드 마우스만으로 컴퓨터 시스템을 작동시킬 수 있다는 것을 너무나 잘 알고 있습니다. 컴퓨터 시스템을 구성하는 자원이 무엇이고, 서로 어떻게 동작하는지는 전혀 알 바 아닌 것 또한 잘 알고 있습니다. 운영체제가 바로 아래 계층인 하드웨어 단을 사용자에게 추상화시켜준 덕분에, 사용자가 보다 컴퓨터를 쉽게 사용할 수 있게 됩니다. 많이들 알고 계시듯이, 운영체제 계층에서 GUI를 제공해주기에 사용자는 마우스나 터치스크린 입력 등을 통해 사용자가 보다 더 편리하게 컴퓨터 시스템을 다룰 수 있습니다. 특히, 최근에는 다중 사용자를 지원하는 운영체제가 대부분입니다. 한 대의 컴퓨터만으로 여러 명의 사람들이 각자 원하는 프로그램을 실행할 수 있게 지원하는 기능으로, 운영체제는 각 사용자 입장에서 컴퓨터를 자신만 사용하고 있다고 느낄 수 있도록 추상화시켜줍니다. 뿐만 아니라 여러 사용자들 또한 컴퓨터가 제공하는 하드웨어 자원을 공평하게 사용할 수 있도록 운영체제가 분배합니다. 하나의 컴퓨터에서 여러 소프트웨어가 동시에 돌아가고, 여러 사용자가 동시에 사용하다보면 서로 다른 소프트웨어 혹은 사용자 간 악의적인 접근과 같은 보안 문제가 발생할 수 있습니다. 우리의 운영체제는 이에 대해서도 보호 기능을 제공함으로써 보다 편리하고 효율적으로 컴퓨터 시스템을 사용할 수 있도록 도와줍니다. 운영체제의 주요 기능을 아래와 같이 정리할 수 있겠습니다. 시스템 관점 컴퓨터 시스템 자원(CPU, 메모리 등)에서 발생하는 문제 해결, 제어 컴퓨터 시스템 자원을 여러 프로그램에게 균형있게 분배 프로그램을 악의적인 애플리케이션으로부터 보호/ 사용자 관점 사용자가 컴퓨터를 보다 편리하게 사용할 수 있는 환경 제공 컴퓨터 시스템 자원을 여러 사용자에게 균형있게 분배 사용자 개인 정보를 악의적인 애플리케이션으로부터 보호 운영체제의 분류 기준과 종류동시 작업 지원 여부에 따른 분류사실 아주 예전에는 사용자를 기준으로 특정 시점에서 하나의 프로그램만 실행할 수 있었습니다. 그 때까지는 하나의 CPU가 달린 컴퓨터라면 당연히 하나의 프로그램만 실행할 수 있어야 했다고 생각했었을까요..? 아무튼 이 때와 같은 운영체제는 프로그램 단 하나로만 작업할 수 있다는 의미 그대로 싱글태스킹(단일 작업, Singletasking) 운영체제라고 부릅니다. 하지만 똑똑한 분들께서 기가 막힌 아이디어를 내놓게 됩니다. ‘사용자는 절대 눈치챌 수 없게 CPU가 작업하는 시간을 겁나 짧은 단위 시간으로 나눠서, 각 단위 시간을 여러 프로그램들이 나누어 쓰게 하면 결국 겁나 짧은 단위 시간까지 인지 못하는 사용자의 눈에는 여러 프로그램이 하나의 컴퓨터에서 동시에 돌아가는 것처럼 보이지 않을까?’ 이 글을 보고 계신 지금도 ‘겁나 짧은 단위 시간’을 모니터에서 못 느끼고 계시죠? 이 기가 막힌 아이디어를 시분할(timesharing) 기법이라는 직관적인 이름으로 부르고, 이 기법을 쓰는 컴퓨터 시스템(시분할 시스템)에서는 보통 ms 이내의 규모로 여러 프로그램들의 전환이 운영체제에 의해 발생합니다. 시분할 시스템은 사용자 편의성 측면에서도 이득입니다. 시분할 기법을 사용하는 시스템을 **대화형 시스템(Interactive system, 쌍방향 시스템)**이라고도 부르는데요. 여러 프로그램을 동시에 실행시켜도 사용자 입장에서는 마구잡이로 아무 프로그램에 던진 입력에 대한 결과(출력)를 다른 사람과 대화하듯이 즉각적으로 받을 수 있기 때문입니다. 즉, 시분할 기법을 채용해 대화형 시스템을 구현하면 컴퓨터 시스템의 **응답 시간(Response time)**이 단축되고, 컴퓨터를 자신이 혼자서 독차지하고 있다고 느끼게 할 수 있습니다. 이에 따라 생산성과 효율성이 향상됩니다. 시분할 기법을 쓰는 시스템이 생긴 덕분에, 지금의 멀티태스킹(다중 작업, Multi-tasking) 운영체제가 탄생합니다. 즉, 사용자가 모니터를 보는 시점 기준으로 2개 이상의 프로그램을 동시에 실행할 수 있게 됩니다. 한 시점에서 여러 프로그램을 실행할 수 있는지 여부에 따라 운영체제를 아래와 같이 분류할 수 있겠습니다. 싱글태스킹 운영체제 : 특정 시점에서 단 하나의 프로그램만 실행 가능 멀티태스킹 운영체제 : 시분할 기법으로 특정 시점에서 2개 이상의 프로그램을 동시에 실행 가능 그런데, 사실 프로그램은 CPU 만으로 돌아가지 않는다는 건 다 아실 겁니다. 여러 프로그램이 ‘겁나 짧은 단위 시간’마다 전환되기 위해선 실행 중인 프로그램 모두가 RAM에 적재되어 있어야만 CPU가 빠르게 꺼내고 쓸 수 있을 겁니다. 이를 위해선 하나의 메모리 공간을 동시에 돌아가는 프로그램 수만큼 나누고, 나눈 공간에 프로그램을 적재해야 합니다. 이와 같이 하나의 메모리에 ‘여러 개’의 프로그램들을 위한 공간을 만들어, 이 프로그램들을 동시에 메모리에 적재하고 처리하는 시스템을 멀티프로그래밍(다중 프로그래밍, Multi-programming) 시스템이라고 합니다. 결국, 위에서부터 언급한 시분할 기법, 대화형 시스템, 멀티태스킹 (운영체제), 멀티프로그래밍 시스템은 모두 같은 뜻을 향하는 단어임을 알 수 있습니다. 한 대의 컴퓨터에서 여러 프로그램을 동시에 실행시킨다는 공통점을 갖고 있기 때문입니다. 이 기법들은 지금까지도 PC와 서버에서 사용되고 있기 때문에 지금 사용하고 있는 랩톱, 스마트폰에서 뭘 눌렀을 때에 대한 피드백을 즉각적으로 받을 수 있고, 전 세계 사용자가 접속하는 구글의 서버 또한 검색어를 입력하면 그에 따른 결과를 바로 보여줌으로써, 각 사용자는 혼자서 서비스를 누리는 것처럼 느끼게 해줍니다. CPU 작업 시간을 ms 시간 단위로 쪼개면서 까지 한 번에 여러 프로그램을 실행한다는 건, 그 만큼 CPU가 놀 시간을 주지 않겠다는 의미이기도 합니다. 그렇기 때문에 시스템 전반적인 입장에서 CPU의 이용률(Utilization), 처리량(Throughput)이 증가할 겁니다. 위 내용은 모두 싱글 프로세서(Single processor) 시스템 기준으로 다룬 겁니다. 멀티 프로세서(Multi-processor) 시스템은 여러 대의 CPU가 하나의 컴퓨터에 탑재되어 있기 때문에 더 복잡한 구조를 가져야 한다고 합니다. 요청 작업 처리 기법에 따른 분류앞에서 시분할 기법을 적용한 컴퓨터 시스템인 대화형 시스템을 꺼냈었습니다. 현재까지도 수 많은 컴퓨터가 사용하고 있는 방식으로, 특정 작업을 요청한 사용자 입장에서 짧은 응답 시간에 따른 여러 이점을 가져다 주었습니다. 일괄 처리(Batch processing) 기법을 알고 나면 시분할 기법이 가져다 주는 이점이 더 잘 느껴지실 것 같습니다. 일괄 처리 방식은 말 그대로, 한 번 작업을 요청받으면 순차적으로 정해진 프로그램(코드)에 따라 일괄적으로 처리하는 데에만 몰두합니다. 그렇기 때문에 사용자는 요청한 작업에 대한 결과를 얻을 때까지 다른 작업을 할 수 없고, 이는 응답 시간, 반환 시간(Turn around time)이 상대적으로 더 증가함을 의미합니다. 일괄 처리 기법은 초창기 컴퓨터의 천공 카드 시스템에서 사용되었었습니다. 하지만 지금도 효율성을 증대시키기 위해 한꺼번에 데이터를 빠르게 처리해야 하는 분야에서 사용하고 있다고 합니다. 하나의 작업에만 몰두하기 때문에, 컴퓨터 시스템 자원의 유휴 시간이 줄어들고 이용률(Utilization)이 증가하는 이점이 있기 때문입니다. 일괄 처리와 반대되는 시분할 기법의 경우 사용자가 작업을 요청해도, 결과가 나올 때까지 자신이 요청한 작업에만 몰두하지 않을 겁니다. (나중에 알게 될) 라운드 로빈(Round Robin, RR) 스케줄링 알고리즘에 따르면, 프로그램에 정해진 타이머 값에 따라 작업을 다 못 끝내도 다른 프로그램(프로세스)의 작업을 처리하러 가야하기 때문입니다. 사용자 입장에서는 요청한 작업에 대한 반응 속도(Response time)가 상대적으로 느려질 수 있을 겁니다. 미사일을 날리거나 멀티미디어 스트리밍을 처리하는 것과 같이, 작업에 대한 처리 결과를 매 시점마다 늦지 않게 제공받아야 제대로 작동하는 분야에도 컴퓨터 시스템이 존재합니다. 그래서 이러한 분야에서는 **실시간 운영체제(RealTime Operating System, RTOS)**가 필요합니다. 정해진 시간 안에 반드시 작업을 완료하는 능력을 가진 운영체제이기 때문입니다. 특히, 미사일 혹은 비행기 항법을 위한 임베디드 시스템은 조금이라도 처리 시간이 흐트러져, 신뢰성이 낮아지면 아주 위험한 결과를 야기할 수 있습니다. 이렇게 엄격한 분야의 컴퓨터 시스템에는 **경성 실시간 운영체제(Hard RealTime Operation System)**가 탑재됩니다. 하지만 동영상 혹은 음악 스트리밍 처리 시스템과 같이 처리 결과가 전달되는 시간이 조금이라도 흐트러지면 제대로 된 결과(기능)를 제공할 수 없긴 하지만, 그렇다고 해서 지구가 박살나는 정도의 위험한 결과를 야기하지 않는 경우에는 **연성 실시간 운영체제(Soft RealTime Operation System)**를 사용합니다. 사용자가 요청한 작업을 어떠한 기준으로 처리하는지에 따라 운영체제를 아래와 같이 분류하고, 각자의 특징을 정리할 수 있겠습니다. 일괄 처리 기법 : 요청받은 작업만 한 꺼번에 일괄적으로 처리하기에 응답 시간, 반환 시간이 증가하지만 유휴 시간이 줄어들고 이용률이 증가한다. 시분할 기법 : CPU의 작업 시간을 짧은 시간 단위로 나누어, 여러 프로그램으로부터 요청받은 작업을 동시에 처리하기에 응답 시간이 줄어들지만 반응 속도가 증가한다. 실시간 운영체제 : 요청받은 작업을 정해진 시간 내에 반드시 완료됨을 보장한다. 다시 2개로 나누어져, 시간 제약, 미완료 시 파급력에 따라 다른 종류의 실시간 운영체제가 탑재된다. 경성 실시간 운영체제 : 위험한 작업을 다루며 제 시간에 결과를 제공받아야만 제대로 작동할 수 있는 분야에서 사용 연성 실시간 운영체제 : 미완료 시 파급력이 상대적으로 덜하기 때문에, 제대로 된 결과를 제공받지 못해도(결과가 불완전해도) 파급력이 미미한 분야에서 사용 References Operating System Concepts 운영체제와 정보기술의 원리","link":"/2020/11/18/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%A9%B0-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C/"}],"tags":[{"name":"Swift","slug":"Swift","link":"/tags/Swift/"},{"name":"운영체제","slug":"운영체제","link":"/tags/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/"}],"categories":[{"name":"프로그래밍 언어","slug":"프로그래밍-언어","link":"/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/"},{"name":"Swift","slug":"프로그래밍-언어/Swift","link":"/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/Swift/"},{"name":"기본 문법 정리","slug":"프로그래밍-언어/Swift/기본-문법-정리","link":"/categories/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/Swift/%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95-%EC%A0%95%EB%A6%AC/"},{"name":"Computer Science","slug":"Computer-Science","link":"/categories/Computer-Science/"},{"name":"운영체제","slug":"Computer-Science/운영체제","link":"/categories/Computer-Science/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/"}]}